class Node:
    def __init__(self, value=0):
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def print_list(self):
        current = self.head
        number_str = ''
        while current:
            number_str += str(current.value)
            current = current.next
        print(number_str)
        
    def print_traversal(self):
        current = self.head
        while current:
            print(current.value , end= ' ')
            current = current.next
        print()

    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

def add_linked_lists(l1, l2):
    l1.reverse()
    l2.reverse()
    
    p1 = l1.head
    p2 = l2.head
    carry = 0
    result = LinkedList()
    
    while p1 or p2 or carry:
        sum_value = carry
        if p1:
            sum_value += p1.value
            p1 = p1.next
        if p2:
            sum_value += p2.value
            p2 = p2.next
        
        carry = sum_value // 10
        result.append(sum_value % 10)
    
    result.reverse()
    return result

def subtract_linked_lists(l1, l2):
    
    l1.reverse()
    l2.reverse()
    
    p1 = l1.head
    p2 = l2.head
    borrow = 0
    result = LinkedList()
    
    while p1:
        diff_value = p1.value - (p2.value if p2 else 0) - borrow
        if diff_value < 0:
            diff_value += 10
            borrow = 1
        else:
            borrow = 0
        
        result.append(diff_value)
        p1 = p1.next
        if p2:
            p2 = p2.next
    
    result.reverse()
    return result

def multiply_linked_lists(l1, l2):
    l1.reverse()
    l2.reverse()
    
    result = LinkedList()
    result.append(0)
    
    p1 = l1.head
    l1_position = 0
    
    while p1:
        temp_result = LinkedList()
        for _ in range(l1_position):
            temp_result.append(0)
        
        carry = 0
        p2 = l2.head
        
        while p2:
            mul_value = p1.value * p2.value + carry
            carry = mul_value // 10
            temp_result.append(mul_value % 10)
            p2 = p2.next
        
        if carry:
            temp_result.append(carry)
        
        result = add_linked_lists(result, temp_result)
        p1 = p1.next
        l1_position += 1
    
    result.reverse()
    return result

def number_to_linked_list(number):
    linked_list = LinkedList()
    for digit in str(number):
        linked_list.append(int(digit))
    return linked_list


a = int(input())
b = int(input())
num1 = number_to_linked_list(a)
num2 = number_to_linked_list(b)

print("Number 1:")
num1.print_list()
print("Number 2:")
num2.print_list()

print("Number 1:")
num1.print_traversal()

print("Number 2:")
num2.print_traversal()

print("\nAddition:")
add_result = add_linked_lists(num1, num2)
add_result.print_list()

print("\nSubtraction:")
sub_result = subtract_linked_lists(num1, num2)
sub_result.print_list()

print("\nMultiplication:")
mul_result = multiply_linked_lists(num1, num2)
mul_result.print_list()
